package com.influenceflow.bot;

import com.influenceflow.dao.DaoException;
import com.influenceflow.model.Campaign;
import com.influenceflow.model.Creator;
import com.influenceflow.model.Submission;
import com.influenceflow.model.SubmissionStatus;
import com.influenceflow.service.CampaignService;
import com.influenceflow.service.CreatorService;
import com.influenceflow.service.SubmissionService;
import com.influenceflow.util.RegexValidator;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public class InfluenceFlowBot extends TelegramLongPollingBot {
    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern("dd.MM.yyyy");
    private static final String HELP_MESSAGE = String.join("\n",
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
            "/start –§–ò–û;email;–Ω–∏—à–∞;@handle ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—Ä–µ–∞—Ç–æ—Ä–∞",
            "/campaigns ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π",
            "/submit taskId URL ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
            "/mymetrics submissionId views=123 likes=45 comments=6 ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏",
            "/moderate ‚Äî –æ—á–µ—Ä–µ–¥—å —Å–¥–∞—á (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)",
            "/approve submissionId ‚Äî —É—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–∞—á—É",
            "/reject submissionId –ø—Ä–∏—á–∏–Ω–∞ ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–¥–∞—á—É",
            "/payouts ‚Äî –±–ª–∏–∂–∞–π—à–∏–µ –≤—ã–ø–ª–∞—Ç—ã (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)",
            "/reports ‚Äî —Å–≤–æ–¥–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏");

    private final CreatorService creatorService;
    private final CampaignService campaignService;
    private final SubmissionService submissionService;

    public InfluenceFlowBot(CreatorService creatorService, CampaignService campaignService,
                            SubmissionService submissionService) {
        this.creatorService = creatorService;
        this.campaignService = campaignService;
        this.submissionService = submissionService;
    }

    @Override
    public String getBotUsername() {
        return Optional.ofNullable(System.getenv("BOT_USERNAME"))
                .orElseThrow(() -> new IllegalStateException("BOT_USERNAME is not set"));
    }

    @Override
    public String getBotToken() {
        return Optional.ofNullable(System.getenv("BOT_TOKEN"))
                .orElseThrow(() -> new IllegalStateException("BOT_TOKEN is not set"));
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) {
            return;
        }
        Message message = update.getMessage();
        String text = message.getText().trim();
        long chatId = message.getChatId();
        Long telegramUserId = message.getFrom() != null ? message.getFrom().getId() : null;
        String username = message.getFrom() != null ? message.getFrom().getUserName() : null;

        if (text.isEmpty()) {
            sendHelp(chatId);
            return;
        }

        String command = text.startsWith("/") ? text.split("\\s+", 2)[0].toLowerCase() : "";

        try {
            switch (command) {
                case "/start":
                    handleStart(chatId, telegramUserId, username, text);
                    break;
                case "/campaigns":
                    handleCampaigns(chatId);
                    break;
                case "/submit":
                    handleSubmit(chatId, telegramUserId, text);
                    break;
                case "/mymetrics":
                    handleMetrics(chatId, text);
                    break;
                case "/moderate":
                    handleModerationList(chatId, telegramUserId, username);
                    break;
                case "/approve":
                    handleModerationAction(chatId, telegramUserId, username, text, SubmissionStatus.APPROVED);
                    break;
                case "/reject":
                    handleModerationAction(chatId, telegramUserId, username, text, SubmissionStatus.REJECTED);
                    break;
                case "/help":
                    sendHelp(chatId);
                    break;
                case "/payouts":
                    handlePayouts(chatId, telegramUserId, username);
                    break;
                case "/reports":
                    handleReports(chatId, telegramUserId, username);
                    break;
                default:
                    sendError(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–±–µ—Ä–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.");
                    break;
            }
        } catch (IllegalArgumentException | IllegalStateException e) {
            sendError(chatId, e.getMessage());
        } catch (DaoException e) {
            logError("Database error", e);
            sendError(chatId, "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ.");
        } catch (Exception e) {
            logError("Unexpected error", e);
            sendError(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.");
        }
    }

    private void handleStart(long chatId, Long telegramUserId, String username, String text) {
        if (telegramUserId == null) {
            sendText(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            return;
        }
        String payload = text.length() > 6 ? text.substring(6).trim() : "";
        if (payload.isEmpty()) {
            sendText(chatId, "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /start –§–ò–û;email;–Ω–∏—à–∞;@handle");
            return;
        }
        String[] parts = payload.split(";");
        if (parts.length < 4) {
            sendText(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –§–æ—Ä–º–∞—Ç: /start –§–ò–û;email;–Ω–∏—à–∞;@handle");
            return;
        }
        Creator creator = creatorService.registerCreator(telegramUserId, username, parts[0].trim(), parts[1].trim(),
                parts[2].trim(), parts[3].trim());
        sendText(chatId, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: " + creator.getId()
                + "\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π /campaigns");
    }

    private void handleCampaigns(long chatId) {
        List<Campaign> campaigns = campaignService.getActiveCampaigns();
        if (campaigns.isEmpty()) {
            sendText(chatId, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –Ω–µ—Ç");
            return;
        }
        StringBuilder response = new StringBuilder("üì¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏:\n\n");
        for (Campaign campaign : campaigns) {
            response.append(formatCampaign(campaign)).append("\n\n");
        }
        response.append("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ —Å–¥–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /submit taskId URL");
        sendText(chatId, response.toString().trim());
    }

    private void handleSubmit(long chatId, Long telegramUserId, String text) {
        if (telegramUserId == null) {
            sendText(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            return;
        }
        String[] parts = text.trim().split("\\s+", 3);
        if (parts.length < 3) {
            sendText(chatId, "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /submit taskId URL");
            return;
        }
        long taskId = parseLong(parts[1], "taskId");
        String url = parts[2];
        Creator creator = creatorService.findByTelegramId(telegramUserId)
                .orElseThrow(() -> new IllegalStateException("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start"));
        Submission submission = submissionService.submitWork(taskId, creator.getId(), url);
        sendText(chatId, "–ì–æ—Ç–æ–≤–æ! –°–¥–∞—á–∞ ‚Ññ" + submission.getId() + " –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.");
    }

    private void handleMetrics(long chatId, String text) {
        String[] parts = text.trim().split("\\s+", 3);
        if (parts.length < 3) {
            sendText(chatId, "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /mymetrics submissionId views=123 likes=45 comments=6");
            return;
        }
        long submissionId = parseLong(parts[1], "submissionId");
        Map<String, Integer> metrics = RegexValidator.parseMetrics(parts[2]);
        submissionService.recordMetrics(submissionId, metrics);
        sendText(chatId, "–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å–¥–∞—á–∏ ‚Ññ" + submissionId);
    }

    private void handleModerationList(long chatId, Long telegramUserId, String username) {
        if (!isAdmin(telegramUserId, username)) {
            sendText(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
            return;
        }
        List<Submission> submissions = submissionService.getPendingSubmissions();
        if (submissions.isEmpty()) {
            sendText(chatId, "–ù–µ—Ç —Å–¥–∞—á –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING");
            return;
        }
        StringBuilder body = new StringBuilder("üõ° –û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n");
        for (Submission submission : submissions) {
            body.append("‚Ä¢ ID ").append(submission.getId())
                    .append(" | task=").append(submission.getTaskId())
                    .append(" | creator=").append(submission.getCreatorId())
                    .append("\n")
                    .append(submission.getUrl()).append("\n\n");
        }
        body.append("–î–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: /approve submissionId\n–î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: /reject submissionId –ø—Ä–∏—á–∏–Ω–∞");
        sendText(chatId, body.toString().trim());
    }

    private void handleModerationAction(long chatId, Long telegramUserId, String username, String text, SubmissionStatus status) {
        if (!isAdmin(telegramUserId, username)) {
            sendText(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
            return;
        }
        String[] parts = text.trim().split("\\s+", 3);
        if (parts.length < 2) {
            sendText(chatId, "–£–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–¥–∞—á–∏: /" + status.name().toLowerCase() + " submissionId");
            return;
        }
        long submissionId = parseLong(parts[1], "submissionId");
        submissionService.moderateSubmission(submissionId, status);
        StringBuilder reply = new StringBuilder("–°—Ç–∞—Ç—É—Å —Å–¥–∞—á–∏ ‚Ññ").append(submissionId)
                .append(" –æ–±–Ω–æ–≤–ª—ë–Ω: ").append(status);
        if (status == SubmissionStatus.REJECTED && parts.length == 3 && !parts[2].trim().isEmpty()) {
            reply.append("\n–ü—Ä–∏—á–∏–Ω–∞: ").append(parts[2].trim());
        }
        sendText(chatId, reply.toString());
    }

    private boolean isAdmin(Long telegramUserId, String username) {
        if (telegramUserId != null && creatorService.isAdmin(telegramUserId)) {
            return true;
        }
        String adminEnv = System.getenv("BOT_ADMIN");
        if (adminEnv == null || adminEnv.isBlank()) {
            return false;
        }
        String[] tokens = adminEnv.split(",");
        for (String token : tokens) {
            String trimmed = token.trim();
            if (trimmed.isEmpty()) {
                continue;
            }
            if (telegramUserId != null) {
                try {
                    if (telegramUserId == Long.parseLong(trimmed)) {
                        return true;
                    }
                } catch (NumberFormatException ignored) {
                    // not a numeric id, fall back to username comparison
                }
            }
            if (username != null && trimmed.equalsIgnoreCase(username)) {
                return true;
            }
        }
        return false;
    }

    private void handlePayouts(long chatId, Long telegramUserId, String username) {
        if (!isAdmin(telegramUserId, username)) {
            sendText(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–ø–ª–∞—Ç");
            return;
        }
        sendText(chatId, "–†–∞–∑–¥–µ–ª –≤—ã–ø–ª–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏!");
    }

    private void handleReports(long chatId, Long telegramUserId, String username) {
        if (!isAdmin(telegramUserId, username)) {
            sendText(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á—ë—Ç–æ–≤");
            return;
        }
        sendText(chatId, "–†–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –µ—â—ë –≥–æ—Ç–æ–≤–∏—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /moderate –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–¥–∞—á–∞–º–∏.");
    }

    private long parseLong(String value, String fieldName) {
        try {
            return Long.parseLong(value);
        } catch (NumberFormatException ex) {
            throw new IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è " + fieldName + ": " + value);
        }
    }

    private void sendHelp(long chatId) {
        sendText(chatId, HELP_MESSAGE);
    }

    private String formatCampaign(Campaign campaign) {
        StringBuilder builder = new StringBuilder();
        builder.append("#").append(campaign.getId()).append(" ").append(campaign.getName()).append("\n")
                .append(campaign.getDescription());
        if (campaign.getStartDate() != null && campaign.getEndDate() != null) {
            builder.append("\n–ü–µ—Ä–∏–æ–¥: ")
                    .append(DATE_FORMAT.format(campaign.getStartDate()))
                    .append(" ‚Äî ")
                    .append(DATE_FORMAT.format(campaign.getEndDate()));
        }
        if (campaign.getRewardPerSubmission() != null) {
            builder.append("\n–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ —Å–¥–∞—á—É: ").append(campaign.getRewardPerSubmission());
        }
        return builder.toString();
    }

    private void sendError(long chatId, String message) {
        sendText(chatId, "‚ö†Ô∏è " + message);
    }

    private void sendText(long chatId, String text) {
        SendMessage sendMessage = new SendMessage(Long.toString(chatId), text);
        sendMessage.disableWebPagePreview();
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new IllegalStateException("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", e);
        }
    }

    private void logError(String context, Exception e) {
        System.err.println(context + ": " + e.getMessage());
    }
}
